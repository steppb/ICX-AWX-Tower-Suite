#! AwxMgmtIgnore
---
- hosts: all
  connection: local
  gather_facts: no
  module_defaults:
    uri:
      validate_certs: '{{template_validate_certs}}'
      method: GET
      user: '{{awxlogin_user}}'
      password: '{{awxlogin_pass}}'
      force_basic_auth: yes
      timeout: 60
  vars:
    WorkflowUrl: '{{icx_inv_ztp_vars.provisioning_vars.awx_api_cb}}/workflow_job_templates'
    InvProvisioning: '{{icx_inv_ztp_vars.provisioning_vars}}'
    template_validate_certs: no

  tasks:
  - {name: Get List of Installed Packages, pip_package_info: , register: PipInfo}

  - name: Install 'pexpect' Package
    pip: {name: pexpect}
    when: PipInfo.packages.pip.pexpect is not defined

  - name: Set Password from Template Variable
    set_fact: {ProvisioningPass: '{{template_provisioning_pass}}'}
    when:
      - ProvisioningPass is not defined
      - template_provisioning_pass is defined
      - template_provisioning_pass != ''

  - name: Set Password from Inventory Variable
    set_fact: {ProvisioningPass: '{{InvProvisioning.default_pass}}'}
    when:
      - ProvisioningPass is not defined
      - InvProvisioning.default_pass is defined
      - InvProvisioning.default_pass != ''

  - name: Attempt SSH Login
    expect:
      command: ssh -o UserKnownHostsFile=/dev/null super@{{ansible_host}}
      echo: yes
      timeout: 10
      responses:
        'want to continue connecting': 'yes'
        'Password:': 'sp-admin'
        'Enter the new password for user super :': "{{ProvisioningPass}}"
        'Enter the reconfirm password for user super:': "{{ProvisioningPass}}"
        'SSH@': "exit"
    changed_when: false
    failed_when: false
    register: SshSession

  - name: Attempt Telnet Login
    telnet:
      host: '{{ansible_host}}'
      login_prompt: "telnet@"
      user: enable
      password_prompt: "#"
      password: "config t"
      prompts:
        - "config"
      command:
        - aaa authentication login default local
        - username super password {{ProvisioningPass}}
        - crypto key generate rsa modulus 2048
        - write mem
    when: "'Connection refused' in SshSession.stdout"

  - name: Get Workflow ID
    uri: {url: '{{WorkflowUrl}}/?name={{InvProvisioning.workflow|urlencode}}'}
    register: ProvisioningWorkflow
    when:
      - InvProvisioning.workflow is defined
      - InvProvisioning.workflow != ''
      - InvProvisioning.workflow is not none

  - name: Launch Workflow
    uri:
      url: '{{WorkflowUrl}}/{{ProvisioningWorkflow.json.results[0].id}}/launch/'
      method: POST
      headers: {Content-Type: "application/json"}
      status_code: 201
    when: ProvisioningWorkflow.json.results[0].id is defined
