---
- hosts: all
  connection: local
  gather_facts: no
  module_defaults:
    uri:
      validate_certs: '{{host_validate_certs|default(false)}}'
      method: GET
      user: '{{awxlogin_user}}'
      password: '{{awxlogin_pass}}'
      force_basic_auth: yes
      timeout: 60
  vars:
    WorkflowUrl: '{{icx_ztp_cfg.general.awx_api_cb}}/workflow_job_templates'
    ZtpGenCfg: '{{icx_ztp_cfg.general}}'
    ZtpDefPass: '{{icx_ztp_cfg.general.default_pass}}'

  tasks:
  - name: Attempt SSH Login
    expect:
      command: ssh -o UserKnownHostsFile=/dev/null super@{{ansible_host}}
      echo: yes
      timeout: 10
      responses:
        'want to continue connecting': 'yes'
        'Password:': 'sp-admin'
        'Enter the new password for user super :': "{{ZtpDefPass}}"
        'Enter the reconfirm password for user super:': "{{ZtpDefPass}}"
        'SSH@': "exit"
    changed_when: false
    failed_when: false
    register: rSshSetup

  - name: Attempt Telnet Login
    telnet:
      host: '{{ansible_host}}'
      login_prompt: "telnet@"
      user: enable
      password_prompt: "#"
      password: "config t"
      prompts:
        - "config"
      command:
        - aaa authentication login default local
        - username super password {{ZtpDefPass}}
        - crypto key generate rsa modulus 2048
        - write mem
    when: "'Connection refused' in rSshSetup.stdout"

  - name: Get Workflow ID
    uri: {url: '{{WorkflowUrl}}/?name={{ZtpGenCfg.workflow|urlencode}}'}
    register: rProvisioningWorkflow
    when: ZtpGenCfg.workflow|default("null", true) != "null"

  - name: Launch Workflow
    uri:
      url: '{{WorkflowUrl}}/{{tWorkflowId}}/launch/'
      method: POST
      headers: {Content-Type: "application/json"}
      body: {limit: '{{ansible_host}}'}
      body_format: json
      status_code: 201
    vars: {tWorkflowId: '{{rProvisioningWorkflow.json.results[0].id}}'}
    when: rProvisioningWorkflow.json.results[0].id is defined
