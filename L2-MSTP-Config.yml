#! Description: Setup and start initial MSTP configuration.
#! Prompt: [{question_name: MSTP Name, question_description: Enter the MSTP configuration name, required: true, type: text, variable: template_l2_mstpname, min: 0, max: 1024, default: '', choices: '', new_question: true}, {question_name: MSTP Revision, question_description: Enter the MSTP revision level, required: true, type: integer, variable: template_l2_mstprev, min: 0, max: 65535, default: 0, choices: '', new_question: true}, {question_name: MSTP Instance ID, question_description: Enter the MSTP Instance ID, required: true, type: integer, variable: prompt_inst, min: 0, max: 4094, default: 0, choices: '', new_question: true}, {question_name: MSTP VLAN Range, question_description: Enter a single VLAN or a range of VLANs to add to the MSTP instance., required: true, type: text, variable: prompt_vlans, min: 0, max: 1024, default: 1-4000, choices: '', new_question: true}]
#! PlaybookVersion: 1.3
# =====================
# Note: This template needs to be run before running other L2-MSTP templates.
---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    ansible_command_timeout: 90
    newline_var: "\r"
    error_parse: '^.*ConnectionError: '
    mcfg: false
    lrange_cmd:
    urange_cmd:
    mvlan_cmd:
    vlan_cmd:

  tasks:
  - name: Find MGMT IP Interface
    icx_command: {commands: 'show ip interface | incl {{ansible_host}}'}
    register: ipint_status

  - name: Save IP Interface
    set_fact: {ip_int: '{{ipint_status.stdout[0].split(" ")}}'}
    when: ipint_status.stdout is defined and ipint_status.stdout[0] != ''

  - name: Format Interface String
    set_fact: {ve_int: 'router-interface ve {{ip_int[1]}}'}
    when: ip_int[0]|lower == 've'

  - name: Get VLAN List
    icx_command: {commands: 'show run vlan | include by port|router-interface'}
    register: vlan_list
    when: ip_int[0]|lower == 've'

  - name: Get Management VLAN
    set_fact: {mvlan: '{{vlan_list.stdout_lines[0][idx - 1].split(" ")}}'}
    when: ip_int[0]|lower == 've' and ve_int in item
    loop: '{{vlan_list.stdout_lines[0]}}'
    loop_control:
      index_var: idx

  - name: Format VLAN Range
    set_fact: {prompt_vlans: '{{prompt_vlans|regex_replace(" to ", "-")}}'}
    when: "' to ' in prompt_vlans"

  - name: Ensure Single VLAN not Management
    assert:
      that: prompt_vlans|int != mvlan[1]|int
      fail_msg: "Connectivity will be lost if Management VLAN is added to MSTP Instance before starting"
    when: "'-' not in prompt_vlans"

  - name: Convert VLAN Range to List
    set_fact: {vrange: '{{prompt_vlans.split("-")}}'}
    when: "'-' in prompt_vlans"

  - name: Set Management VLAN Command
    set_fact: {mcfg: true, mvlan_cmd: 'mstp instance {{prompt_inst}} vlan {{mvlan[1]}}'}
    when: "'-' in prompt_vlans and mvlan[1] is defined and mvlan[1]|int >= vrange[0]|int and mvlan[1]|int <= vrange[1]|int"

  - name: Set VLAN Range Command
    set_fact: {range_cmd: 'mstp instance {{prompt_inst}} vlan {{vrange[0]}} to {{vrange[1]}}'}
    when: mvlan_cmd != ''

  - name: Set Lower VLAN Range Command
    set_fact:
      lrange_cmd: 'mstp instance {{prompt_inst}} vlan {{vrange[0]}} to {{mvlan[1]|int - 1}}'
    when: "'-' in prompt_vlans and mvlan[1] is defined and vrange[0]|int < mvlan[1]|int and mcfg|bool"

  - name: Set Upper VLAN Range Command
    set_fact:
      urange_cmd: 'mstp instance {{prompt_inst}} vlan {{mvlan[1]|int + 1}} to {{vrange[1]}}'
    when: "'-' in prompt_vlans and mvlan[1] is defined and vrange[1]|int > mvlan[1]|int and mcfg|bool"

  - name: Set Single VLAN Command
    set_fact: {vlan_cmd: 'mstp instance {{prompt_inst}} vlan {{prompt_vlans}}'}
    when: "'-' not in prompt_vlans"

  - name: Configuring MSTP
    icx_config:
      lines: |
        mstp scope pvst
        mstp name {{template_l2_mstpname}}
        mstp revision {{template_l2_mstprev}}
        {{range_cmd}}
        {{lrange_cmd}}
        {{urange_cmd}}
        {{vlan_cmd}}
        mstp start
        {{mvlan_cmd}}
      save_when: changed
    register: icxconfig_status
    failed_when: false

  - name: Parse Switch Error
    set_fact:
      error_msg: "{{icxconfig_status.module_stderr|regex_replace('\n')|regex_replace(error_parse)}}"
    when: icxconfig_status.rc is defined and icxconfig_status.rc == 1

  - name: Display Switch Error
    assert: {that: error_msg is not defined, fail_msg: '{{error_msg.split(newline_var)}}'}
    when: error_msg is defined

  - name: Get MSTP Config
    icx_command: {commands: show mstp configuration}
    register: mstp_config

  - name: Display MSTP Config
    debug: var=mstp_config.stdout_lines[0]
    when: mstp_config.stdout_lines[0] is defined
