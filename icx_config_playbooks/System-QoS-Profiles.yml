---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_cli_ssh_type: paramiko
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    BinVerRe: '^[A-Za-z]{3,4}([0-9]{2})([0-9])([0-9]{2}[a-zA-Z]{0,2}(b[0-9]{3})?)(ufi)?.bin'

  tasks:
  - name: Egress Shaper Config Block
    block:
    - {name: Get System Hardware Info, icx_facts: {gather_subset: hardware}}

    - name: Prepare Egress Shaper Command
      set_fact: {IfgBytes: 'qos egress-shape-ifg-bytes {{prompt_qos_ifgbytes}}'}
      vars: {tCurSwVer: '{{ansible_net_image|regex_replace(BinVerRe, "\1.\2.\3")}}'}
      when: tCurSwVer is version('8.0.70', '>=')
    when: prompt_qos_ifgbytes|default("null", true) != "null"

  - name: Prepare DSCP to Internal Forwarding Map Configuration
    set_fact: {DscpMap: "{{DscpMap|default([]) + ['qos-tos map dscp-priority '~item]}}"}
    loop: '{{prompt_qos_dscpmap.split(NewlineRe)}}'
    vars: {NewlineRe: "\n"}
    when: prompt_qos_dscpmap|default("null", true) != "null" and "to" in item

  - name: Configure QoS Mixed Scheduling
    icx_config: {lines: qos mechanism mixed-sp-wrr}
    register: IcxCfgStatus
    failed_when: IcxCfgStatus.msg is defined and "MODULE FAILURE" not in IcxCfgStatus.msg

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Configure DSCP to Internal Forwarding Mapping
    icx_config: {lines: "{{DscpMap|join('\n')}}"}
    register: IcxCfgStatus
    failed_when: IcxCfgStatus.msg is defined and "MODULE FAILURE" not in IcxCfgStatus.msg
    when: DscpMap|default("null", true) != "null"

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get Current QoS Profile Names
    icx_command: {commands: show run | include qos name}
    register: QosNames

  - name: Set Current Queue 7 Name
    set_fact: {CurQName7: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp7' in item"

  - name: Set Current Queue 6 Name
    set_fact: {CurQName6: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp6' in item"

  - name: Set Current Queue 5 Name
    set_fact: {CurQName5: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp5' in item"

  - name: Set Current Queue 4 Name
    set_fact: {CurQName4: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp4' in item"

  - name: Set Current Queue 3 Name
    set_fact: {CurQName3: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp3' in item"

  - name: Set Current Queue 2 Name
    set_fact: {CurQName2: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp2' in item"

  - name: Set Current Queue 1 Name
    set_fact: {CurQName1: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp1' in item"

  - name: Set Current Queue 0 Name
    set_fact: {CurQName0: '{{item.split()[3]}}'}
    loop: '{{QosNames.stdout_lines[0]}}'
    when: "'qos name qosp0' in item"

  - name: Configure Quality of Service
    icx_config:
      lines: |
        qos name {{CurQName7|default("qosp7")}} {{prompt_qos_qn7}}
        qos name {{CurQName6|default("qosp6")}} {{prompt_qos_qn6}}
        qos name {{CurQName5|default("qosp5")}} {{prompt_qos_qn5}}
        qos name {{CurQName4|default("qosp4")}} {{prompt_qos_qn4}}
        qos name {{CurQName3|default("qosp3")}} {{prompt_qos_qn3}}
        qos name {{CurQName2|default("qosp2")}} {{prompt_qos_qn2}}
        qos name {{CurQName1|default("qosp1")}} {{prompt_qos_qn1}}
        qos name {{CurQName0|default("qosp0")}} {{prompt_qos_qn0}}
        qos profile {{tQ7}} {{tQ6}} {{tQ5}} {{tQ4}} {{tQ3}} {{tQ2}} {{tQ1}} {{tQ0}}
        {{IfgBytes|default()}}
      save_when: changed
    register: IcxCfgStatus
    failed_when: IcxCfgStatus.msg is defined and "MODULE FAILURE" not in IcxCfgStatus.msg
    vars:
      tQ7: "{{prompt_qos_qn7}} {{prompt_qos_qbw7}}"
      tQ6: "{{prompt_qos_qn6}} {{prompt_qos_qbw6}}"
      tQ5: "{{prompt_qos_qn5}} {{prompt_qos_qbw5}}"
      tQ4: "{{prompt_qos_qn4}} {{prompt_qos_qbw4}}"
      tQ3: "{{prompt_qos_qn3}} {{prompt_qos_qbw3}}"
      tQ2: "{{prompt_qos_qn2}} {{prompt_qos_qbw2}}"
      tQ1: "{{prompt_qos_qn1}} {{prompt_qos_qbw1}}"
      tQ0: "{{prompt_qos_qn0}} {{prompt_qos_qbw0}}"

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - {name: Get QoS Config, icx_command: {commands: show qos-tos}, register: QosTosCfg}
  - {name: Display QoS Config, debug: {msg: "{{QosTosCfg.stdout_lines[0]}}"}}
