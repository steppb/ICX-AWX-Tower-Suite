---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_cli_ssh_type: paramiko
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    EthRe: '(ethernet|etherne|ethern|ether|ethe|eth|et|e)'
    RngRe: 'to[ e]*([0-9])'
    IntRe: '[ e]*([0-9]{1,2}/[0-9])'
    PrimaryPortRe: '^[ e]*([0-9]{1,2}/[0-9]{1,2}[0-9/]*).*$'

  tasks:
  - name: Gather Hardware Info
    icx_facts: {gather_subset: hardware}    
    when: ansible_net_image is not defined

  - name: Parse Version
    set_fact: {SwVer: '{{ansible_net_image|regex_replace("^.*([0-9]{5}).*$", "\1")}}'}

  - name: Set LAG ID
    set_fact: {LagId: 'id {{prompt_lag_id}}'}
    when: "prompt_lag_id is defined and 'keep-alive' not in prompt_lag_mode"

  - name: Set Automatic LAG ID
    set_fact: {LagId: id auto}
    when: prompt_lag_id is not defined and SwVer|int >= 8061

  - name: Correct Interface Format
    set_fact: {EthInt: '{{tEthInt|regex_replace(IntRe, " e \1")}}'}
    vars: {tEthInt: '{{prompt_lag_int|lower|regex_replace(EthRe, "e ")}}'}

  - name: Correct Range Format
    set_fact: {EthInt: '{{EthInt|regex_replace(RngRe, " to \1")}}'}
    when: "'to' in prompt_lag_int"

  - name: Set Legacy LAG Commands
    set_fact:
      PrimaryPortCmd: 'primary-port {{EthInt|regex_replace(PrimaryPortRe, "\1")}}'
      DeployCmd: deploy
    when: SwVer|int < 8061

  - name: Adding Ports to Lag
    icx_config:
      lines: |
        lag {{prompt_lag_name}} {{prompt_lag_mode}} {{LagId|default()}}
        ports {{EthInt}}
        {{PrimaryPortCmd|default()}}
        {{DeployCmd|default()}}
      save_when: changed
    register: IcxCfgStatus
    failed_when: IcxCfgStatus.msg is defined and "MODULE FAILURE" not in IcxCfgStatus.msg

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get LAG Config
    icx_command: {commands: 'show lag {{prompt_lag_name}}'}
    register: LagCfg

  - name: Display LAG Config
    debug: var=LagCfg.stdout_lines[0]
