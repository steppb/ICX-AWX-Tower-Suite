---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_cli_ssh_type: paramiko
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '

  tasks:
  - name: Check Host Variables and Setup Config List
    set_fact:
      iface: '{{item.iface}}'
      ipaddr: '{{item.ipv6.addr|default("")}}'
    register: HostVarCfg
    loop: '{{host_icx_int}}'
    when:
      - item.iface is defined
      - item.iface != ''
      - item.ipv6.addr is defined

  - name: Store Host Variable List
    set_fact: {ConfigList: '{{HostVarCfg.results}}'}
    when: HostVarCfg.results is defined

  - name: Check Prompt Variables and Setup Config List
    set_fact:
      iface: '{{prompt_rtr_int}}'
      ipaddr: '{{prompt_rtr_int_ip|default("")}}'
    register: PromptVarCfg
    with_items: 1
    when:
      - ansible_play_hosts|length == 1
      - ConfigList is not defined
      - prompt_rtr_int is defined

  - name: Store Prompt Variable List
    set_fact: {ConfigList: '{{PromptVarCfg.results}}'}
    when: PromptVarCfg.results[0].ansible_facts is defined

  - name: Get IP Interface Info
    icx_command:
      commands: 'show run interface {{item.ansible_facts.iface}} | include ipv6 address'
    register: IpIntInfo
    loop: '{{ConfigList}}'
    when: item.ansible_facts is defined

  - name: Store IP Interface Info
    set_fact: {OldIp: '{{item.stdout[0].split(" ")[2]}}'}
    loop: '{{IpIntInfo.results}}'
    register: IpIntList
    when:
      - item.stdout[0] is defined
      - item.stdout[0] != ""
      - 'item.stdout[0].split(" ")[2] != ansible_host'

  - name: Remove Old IPv6 Address
    icx_config:
      lines: |
        no ipv6 address {{item.ansible_facts.OldIp}}
        no ipv6 enable
      parents: int {{ConfigList[idx].ansible_facts.iface}}
      save_when: changed
    loop: '{{IpIntList.results}}'
    loop_control: {index_var: idx}
    register: IcxCfgStatus
    when:
      - ConfigList[idx].ansible_facts is defined
      - item.ansible_facts is defined
      - item.ansible_facts.OldIp != ansible_host
      - item.ansible_facts.OldIp != ConfigList[idx].ansible_facts.ipaddr

  - name: Parse Switch Error
    set_fact: {ErrMsg: "{{item.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"}
    loop: '{{IcxCfgStatus.results}}'
    when: item.rc is defined and item.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Configure Router Interface
    icx_config:
      lines: |
         ipv6 enable
         ipv6 address {{item.ansible_facts.ipaddr}}
      parents: int {{item.ansible_facts.iface}}
      save_when: changed
    loop: '{{ConfigList}}'
    loop_control: {index_var: idx}
    register: IcxCfgStatus
    failed_when: false
    when: item.ansible_facts is defined and
          item.ansible_facts.ipaddr != ansible_host and
          item.ansible_facts.ipaddr != '' and
          (IpIntList.results[idx].ansible_facts.OldIp is not defined or
          IpIntList.results[idx].ansible_facts.OldIp != item.ansible_facts.ipaddr)

  - name: Parse Switch Error
    set_fact: {ErrMsg: "{{item.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"}
    loop: '{{IcxCfgStatus.results}}'
    when: item.rc is defined and item.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get Interface Config
    icx_command: {commands: 'show run interface {{item.ansible_facts.iface}}'}
    loop: '{{ConfigList}}'
    register: IntConfig
    when: ConfigList is defined and item.ansible_facts is defined

  - name: Display Interface Config
    debug: var=IntConfig.results[0].stdout_lines[0]
