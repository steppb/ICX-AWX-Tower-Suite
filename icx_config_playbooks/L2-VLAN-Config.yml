#! Prompt: [{question_name: VLAN ID@colon, required: true, type: integer, variable: prompt_l2_vid, min: 1, max: 4086}, {question_name: VLAN Name@colon, required: false, type: text, variable: prompt_l2_vname, min: 1, max: 1024}, {question_name: Tagged Interface(s)@colon, question_description: (e.g. e1/1/1 or e1/1/1 to 1/1/10), required: false, type: text, variable: prompt_l2_vinttag, min: 3, max: 1024}, {question_name: Untagged Interface(s)@colon, question_description: (e.g. e1/1/1 or e1/1/1 to 1/1/10), required: false, type: text, variable: prompt_l2_vintuntag, min: 3, max: 1024}, {question_name: Remove Interface(s) From VLAN@question, required: false, type: multiplechoice, variable: prompt_l2_vremove, default: 'no', choices: yes\nno}, {question_name: Create Router Interface@question, required: false, type: multiplechoice, variable: prompt_l2_vrtr, default: 'no', choices: yes\nno}, {question_name: Spanning-Tree Protocol@colon, required: false, type: multiplechoice, variable: prompt_l2_vstp, choices: Disable\n802.1d\n802.1w}]
# =====================
---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    EthRe: '(ethernet|etherne|ethern|ether|ethe|eth|et|e)'
    RngRe: 'to[ e]*([0-9])'
    IntRe: '[ e]*([0-9]{1,2}/[0-9])'

  tasks:
  - name: Tagged Interface Correction Block
    block:
    - name: Correct Interface Format
      set_fact: {TagInt: '{{tTagInt|regex_replace(IntRe, " e \1")}}'}
      vars: {tTagInt: '{{prompt_l2_vinttag|lower|regex_replace(EthRe, "e ")}}'}

    - name: Correct Range Format
      set_fact: {TagInt: '{{TagInt|regex_replace(RngRe, " to \1")}}'}
      when: "'to' in prompt_l2_vinttag and 'lag' not in prompt_l2_vinttag"
    when: prompt_l2_vinttag|default("null", true) != "null"

  - name: Untagged Interface Correction Block
    block:
    - name: Correct Interface Format
      set_fact: {UntagInt: '{{tUntagInt|regex_replace(IntRe, " e \1")}}'}
      vars: {tUntagInt: '{{prompt_l2_vintuntag|lower|regex_replace(EthRe, "e ")}}'}

    - name: Correct Range Format
      set_fact: {UntagInt: '{{UntagInt|regex_replace(RngRe, " to \1")}}'}
      when: "'to' in prompt_l2_vintuntag and 'lag' not in prompt_l2_vintuntag"
    when: prompt_l2_vintuntag|default("null", true) != "null"

  - name: Check VLAN Name
    set_fact: {VlanName: 'name {{prompt_l2_vname}}'}
    when: prompt_l2_vname|default("null", true) != "null"

  - name: Setup VLAN Interface Removal
    set_fact: {RemCmd: no}
    when:
      - prompt_l2_vremove is defined
      - prompt_l2_vremove|bool
      - TagInt is defined or UntagInt is defined

  - name: Setup VLAN Tagged Interface Command
    set_fact: {VlanTagIntCmd: '{{RemCmd|default()}} tagged {{TagInt}}'}
    when: TagInt|default("null", true) != "null"

  - name: Setup VLAN Untagged Interface Command
    set_fact: {VlanUntagIntCmd: '{{RemCmd|default()}} untagged {{UntagInt}}'}
    when: UntagInt|default("null", true) != "null"

  - name: Setup Router Interface Command
    set_fact: {RtrIntCmd: 'router-interface ve {{prompt_l2_vid}}'}
    when: prompt_l2_vrtr is defined and prompt_l2_vrtr|bool

  - name: STP Config Block
    block:
    - name: STP Disable Setup Block
      block:
      - name: Check For Current STP Config
        icx_command: {commands: 'show run vlan {{prompt_l2_vid}} | incl spanning'}
        register: CurStpCfg

      - name: Set Command to Remove 802.1w STP
        set_fact: {DisableRstpCmd: 'no spanning-tree 802-1w'}
        when: "'802-1w' in CurStpCfg.stdout[0]"

      - name: Set Command to Remove 802.1d STP
        set_fact: {DisableStpCmd: 'no spanning-tree'}
        when: "'spanning-tree' in CurStpCfg.stdout[0]"
      when: prompt_l2_vstp == 'Disable'

    - name: STP Enable Block
      block:
      - name: Set Spanning-Tree Command
        set_fact: {EnableStp: 'spanning-tree'}
        when: "'802.1d' in prompt_l2_vstp"

      - name: Set RSTP Command
        set_fact: {EnableStp: 'spanning-tree 802-1w'}
        when: "'802.1w' in prompt_l2_vstp"
      when: prompt_l2_vstp != 'Disable'
    when: prompt_l2_vstp is defined

  - name: Configure VLAN
    icx_config:
      lines: |
        vlan {{prompt_l2_vid}} {{VlanName|default()}}
         {{VlanTagIntCmd|default()}}
         {{VlanUntagIntCmd|default()}}
         {{RtrIntCmd|default()}}
         {{DisableRstpCmd|default()}}
         {{DisableStpCmd|default()}}
         {{EnableStp|default()}}
      save_when: changed
    register: IcxCfgStatus
    failed_when: IcxCfgStatus.msg is defined and "MODULE FAILURE" not in IcxCfgStatus.msg

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get VLAN Info
    icx_command: {commands: 'show run vlan {{prompt_l2_vid}}'}
    register: VlanCfg

  - name: Display VLAN Info
    debug: var=VlanCfg.stdout_lines[0]
