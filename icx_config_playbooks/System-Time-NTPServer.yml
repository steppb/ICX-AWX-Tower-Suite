---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    NtpKeyId:

  tasks:
  - name: Set Key ID
    set_fact: {NtpKeyId: 'key {{prompt_ntp_keyid}}'}
    when: prompt_ntp_keyid is defined

  - name: Check For Existing NTP KeyID
    icx_command: {commands: "show run | incl authentication-key key-id {{prompt_ntp_keyid}}"}
    register: NtpKeyIdStatus
    when: NtpKeyId != '' and prompt_ntp_authmethod is defined and prompt_ntp_key is defined

  - name: Check For Existing NTP Server
    icx_command: {commands: "show ntp associations | incl {{prompt_ntp_server}}"}
    register: NtpServerStatus
    when: prompt_ntp_server is defined and prompt_ntp_server != ''

  - name: Set Command to Remove Existing NTP Key
    set_fact: {NtpKeyRmvCmd: 'no authentication-key {{NtpKeyId}}'}
    when: NtpKeyIdStatus.stdout is defined and NtpKeyIdStatus.stdout[0] != ''

  - name: Set NTP Authentication Key Command
    set_fact:
      NtpKeyCmd: authentication-key {{NtpKeyId}} {{prompt_ntp_authmethod}} {{prompt_ntp_key}}
    when: NtpKeyIdStatus.stdout is defined

  - name: Set Command to Remove Existing NTP Server
    set_fact: {NtpServerRmvCmd: 'no server {{prompt_ntp_server}}'}
    when: NtpServerStatus.stdout is defined and NtpServerStatus.stdout[0] != ''

  - name: Set NTP Server Command
    set_fact: {NtpServerCmd: 'server {{prompt_ntp_server}} {{NtpKeyId}}'}
    when: NtpServerStatus.stdout is defined

  - name: Configure NTP
    icx_config:
      lines: |
        {{NtpKeyRmvCmd|default()}}
        {{NtpKeyCmd|default()}}
        {{NtpServerRmvCmd|default()}}
        {{NtpServerCmd|default()}}
        authenticate
      parents: ntp
      save_when: changed
      diff_ignore_lines: ^ntp$
    register: IcxCfgStatus
    failed_when: false

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get NTP Associations
    icx_command: {commands: show ntp associations}
    register: NtpStatus

  - name: Display NTP Associations
    debug: var=NtpStatus.stdout_lines[0]
