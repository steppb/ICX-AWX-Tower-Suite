#! Prompt: [{question_name: SSH IPv4 Access-List Name or Number@colon, required: false, type: text, variable: prompt_ssh_ipv4_acl, min: 1, max: 1024, default: SSH_ACCESS}, {question_name: SSH IPv6 Access-List Name or Number@colon, required: false, type: text, variable: prompt_ssh_ipv6_acl, min: 1, max: 1024, default: RemoteAccess}, {question_name: SSH Idle Time@colon, question_description: Idle time in minutes, required: true, type: integer, variable: prompt_ssh_idletime, min: 0, max: 240, default: 10}, {question_name: SSH Timeout@colon, question_description: SSH login timeout in seconds, required: true, type: integer, variable: prompt_ssh_timeout, min: 1, max: 120, default: 60}, {question_name: Disable AES-CBC Encryption Mode@question, required: true, type: multiplechoice, variable: prompt_ssh_disable_aescbc, default: 'yes', choices: yes\nno}]
# =====================
# Note: SSH access-list must be created with L3-IPv4-ACL or Remote-SSH-ACLPermit before
# running this template.
---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    LgcyOffset: 0

  tasks:
  - name: Get IPv4 SSH ACL
    icx_command: {commands: 'show ip access-list {{prompt_ssh_ipv4_acl}}'}
    register: AclStatus

  - name: Verify SSH ACL
    assert:
      that: AclStatus.stdout[0]|default("null", true) != "null"
      fail_msg:
        - "ERROR: Access-list {{prompt_ssh_ipv4_acl}} is not configured."
        - "       Create SSH access-list with L3-IPv4-ACL or Remote-SSH-ACLPermit"
        - "       before running this template."

  - name: Get List of Connected Users
    icx_command: {commands: sh who | incl client|you are connecting}
    register: WhoOut

  - name: Find Index
    set_fact: {ConnIdx: '{{idx}}'}
    loop: '{{WhoOut.stdout_lines[0]}}'
    loop_control: {index_var: idx}
    when: "'you are connecting' in item"

  - name: Get Client IP
    set_fact:
      ClientIp: '{{WhoOut.stdout_lines[0][ConnIdx - 1]|regex_replace(tWhoRe, "\1")}}'
    vars: {tWhoRe: '^.* client ip address ([0-9a-f:.]*).*$'}

  - name: Check if Client IPv4 Address is Blocked
    block:
    - name: Get SSH ACL from device
      icx_command:
        commands: |
          sh ip access-list {{prompt_ssh_ipv4_acl}}
          sh run | incl Current configuration
      register: SshAcl

    - name: Check for Legacy ACL Output
      set_fact: {LgcyOffset: 1}
      loop: '{{SshAcl.stdout_lines[0]}}'
      vars: {tSplit: '{{item.split()|default("null", true)}}'}
      when: (tSplit[0] != "null") and
            (tSplit[0] == "permit") or
            (tSplit[0] == "deny")

    - name: Get Permit Line
      set_fact: {PermitIdx: '{{PermitIdx|default(idx, true)}}'}
      loop: '{{SshAcl.stdout_lines[0]}}'
      loop_control: {index_var: idx}
      vars:
        tNet: '{{item.split()[2-LgcyOffset]|default("null", true)}}'
        tMask: '{{item.split()[3-LgcyOffset]|default("null", true)}}'
      when: ('permit' in item) and
            ('permit any' in item or
            'permit host' in item and ClientIp in item or
            ('host' not in item and tNet != "null" and tMask != "null" and
            bIp1|int >= tNet.split(".")[0]|int and
            bIp2|int >= tNet.split(".")[1]|int and
            bIp3|int >= tNet.split(".")[2]|int and
            bIp4|int >= tNet.split(".")[3]|int and
            bIp1|int <= tNet.split(".")[0]|int + tMask.split(".")[0]|int and
            bIp2|int <= tNet.split(".")[1]|int + tMask.split(".")[1]|int and
            bIp3|int <= tNet.split(".")[2]|int + tMask.split(".")[2]|int and
            bIp4|int <= tNet.split(".")[3]|int + tMask.split(".")[3]|int))

    - name: Get Deny Line
      set_fact: {DenyIdx: '{{DenyIdx|default(idx, true)}}'}
      loop: '{{SshAcl.stdout_lines[0]}}'
      loop_control: {index_var: idx}
      vars:
        tNet: '{{item.split()[2-LgcyOffset]|default("null", true)}}'
        tMask: '{{item.split()[3-LgcyOffset]|default("null", true)}}'
      when: ('deny' in item) and
            ('deny any' in item or
            'deny host' in item and ClientIp in item or
            ('host' not in item and tNet != "null" and tMask != "null" and
            bIp1|int >= tNet.split(".")[0]|int and
            bIp2|int >= tNet.split(".")[1]|int and
            bIp3|int >= tNet.split(".")[2]|int and
            bIp4|int >= tNet.split(".")[3]|int and
            bIp1|int <= tNet.split(".")[0]|int + tMask.split(".")[0]|int and
            bIp2|int <= tNet.split(".")[1]|int + tMask.split(".")[1]|int and
            bIp3|int <= tNet.split(".")[2]|int + tMask.split(".")[2]|int and
            bIp4|int <= tNet.split(".")[3]|int + tMask.split(".")[3]|int))

    - name: Assert Parse Results
      assert:
        that:
          - PermitIdx is defined
          - PermitIdx|int < DenyIdx|default(PermitIdx|int + 1)|int
        msg: "ERROR: Your IP is blocked in SSH ACL for switch. Aborting..."
    vars:
      bIp1: '{{ClientIp.split(".")[0]}}'
      bIp2: '{{ClientIp.split(".")[1]}}'
      bIp3: '{{ClientIp.split(".")[2]}}'
      bIp4: '{{ClientIp.split(".")[3]}}'
    when: prompt_ssh_ipv4_acl|default("null", true) != "null" and ':' not in ClientIp

  - name: Setup IPv4 ACL Configuration
    set_fact: {Ipv4AccessGroup: 'ssh access-group {{prompt_ssh_ipv4_acl}}'}
    when: prompt_ssh_ipv4_acl|default("null", true) != "null"

  - name: Setup IPv6 ACL Configuration
    set_fact: {Ipv6AccessGroup: 'ssh access-group ipv6 {{prompt_ssh_ipv6_acl}}'}
    when: prompt_ssh_ipv6_acl|default("null", true) != "null"

  - name: Setup AES-CBC Disable Configuration
    set_fact: {DisableAesCbc: ip ssh encryption disable-aes-cbc}
    when: prompt_ssh_disable_aescbc|bool

  - name: Harden SSH Server
    icx_config:
      lines: |
        ip ssh idle-time {{prompt_ssh_idletime|default("10")}}
        ip ssh timeout {{prompt_ssh_timeout|default("60")}}
        {{Ipv4AccessGroup|default()}}
        {{Ipv6AccessGroup|default()}}
        {{DisableAesCbc|default()}}
      save_when: changed
    register: IcxCfgStatus
    failed_when: false

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - {name: Get SSH Config, icx_command: {commands: show ip ssh config}, register: SshCfg}
  - {name: Display SSH Config, debug: {msg: "{{SshCfg.stdout_lines[0]}}"}}
