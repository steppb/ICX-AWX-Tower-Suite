#! Description: Apply SSH hardening config.
# =====================
# Note: Remote-SSH-ACLPermit needs to be applied before running this template.
---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    NewlineVar: "\r"
    ErrParse: '^.*ConnectionError: '
    LgcyOffset: 0

  tasks:
  - name: Get SSH_ACCESS ACL
    icx_command: {commands: sh ip access-list SSH_ACCESS}
    register: AclStatus

  - name: Verify SSH_ACCESS ACL
    assert:
      that: AclStatus.stdout[0]|default("null", true) != "null"
      fail_msg:
        - "ERROR: ACL 'SSH_ACCESS' is not configured"
        - "Remote-SSH-ACLPermit needs to be applied before running this template"

  - name: Get client IP
    icx_command: {commands: sh who | incl client|you are connecting}
    register: WhoOut

  - name: Find Index
    set_fact: {ConnIdx: '{{idx}}'}
    loop: '{{WhoOut.stdout_lines[0]}}'
    loop_control: {index_var: idx}
    when: "'you are connecting' in item"

  - name: Get Client IP
    set_fact:
      ClientIp: '{{WhoOut.stdout_lines[0][ConnIdx - 1]|regex_replace(tWhoRe, "\1")}}'
    vars: {tWhoRe: '^.* client ip address ([0-9a-f:.]*).*$'}

  - name: Check if Client IPv4 Address is Blocked
    block:
    - name: Get SSH ACL from device
      icx_command:
        commands: |
          sh ip access-list SSH_ACCESS
          sh run | incl Current configuration
      register: SshAcl

    - name: Check for Legacy ACL Output
      set_fact: {LgcyOffset: 1}
      loop: '{{SshAcl.stdout_lines[0]}}'
      vars: {tSplit: '{{item.split()|default("null", true)}}'}
      when: (tSplit[0] != "null") and
            (tSplit[0] == "permit") or
            (tSplit[0] == "deny")

    - name: Get Permit Line
      set_fact: {PermitIdx: '{{PermitIdx|default(idx, true)}}'}
      loop: '{{SshAcl.stdout_lines[0]}}'
      loop_control: {index_var: idx}
      vars:
        tNet: '{{item.split()[2-LgcyOffset]|default("null", true)}}'
        tMask: '{{item.split()[3-LgcyOffset]|default("null", true)}}'
      when: ('permit' in item) and
            ('permit any' in item or
            'permit host' in item and ClientIp in item or
            ('host' not in item and tNet != "null" and tMask != "null" and
            bIp1|int >= tNet.split(".")[0]|int and
            bIp2|int >= tNet.split(".")[1]|int and
            bIp3|int >= tNet.split(".")[2]|int and
            bIp4|int >= tNet.split(".")[3]|int and
            bIp1|int <= tNet.split(".")[0]|int + tMask.split(".")[0]|int and
            bIp2|int <= tNet.split(".")[1]|int + tMask.split(".")[1]|int and
            bIp3|int <= tNet.split(".")[2]|int + tMask.split(".")[2]|int and
            bIp4|int <= tNet.split(".")[3]|int + tMask.split(".")[3]|int))

    - name: Get Deny Line
      set_fact: {DenyIdx: '{{DenyIdx|default(idx, true)}}'}
      loop: '{{SshAcl.stdout_lines[0]}}'
      loop_control: {index_var: idx}
      vars:
        tNet: '{{item.split()[2-LgcyOffset]|default("null", true)}}'
        tMask: '{{item.split()[3-LgcyOffset]|default("null", true)}}'
      when: ('deny' in item) and
            ('deny any' in item or
            'deny host' in item and ClientIp in item or
            ('host' not in item and tNet != "null" and tMask != "null" and
            bIp1|int >= tNet.split(".")[0]|int and
            bIp2|int >= tNet.split(".")[1]|int and
            bIp3|int >= tNet.split(".")[2]|int and
            bIp4|int >= tNet.split(".")[3]|int and
            bIp1|int <= tNet.split(".")[0]|int + tMask.split(".")[0]|int and
            bIp2|int <= tNet.split(".")[1]|int + tMask.split(".")[1]|int and
            bIp3|int <= tNet.split(".")[2]|int + tMask.split(".")[2]|int and
            bIp4|int <= tNet.split(".")[3]|int + tMask.split(".")[3]|int))

    - name: Assert Parse Results
      assert:
        that:
          - PermitIdx is defined
          - PermitIdx|int < DenyIdx|default(PermitIdx|int + 1)
        msg: "ERROR: Your IP is blocked in SSH ACL for switch. Aborting..."
      vars: {tDenyIdx: '{{DenyIdx|default(PermitIdx|int + 1)}}'}
    vars:
      bIp1: '{{ClientIp.split(".")[0]}}'
      bIp2: '{{ClientIp.split(".")[1]}}'
      bIp3: '{{ClientIp.split(".")[2]}}'
      bIp4: '{{ClientIp.split(".")[3]}}'
    when: "':' not in ClientIp"

  - name: Harden SSH Server
    icx_config:
      lines: |
        ip ssh idle-time 10
        ip ssh timeout 60
        ssh access-group SSH_ACCESS
        ssh access-group ipv6 RemoteAccess
        ip ssh encryption disable-aes-cbc
      save_when: changed
    register: IcxCfgStatus
    failed_when: false

  - name: Parse Switch Error
    set_fact:
      ErrMsg: "{{IcxCfgStatus.module_stderr|regex_replace('\n')|regex_replace(ErrParse)}}"
    when: IcxCfgStatus.rc is defined and IcxCfgStatus.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(NewlineVar)}}'}
    when: ErrMsg is defined

  - name: Get SSH Config
    icx_command: {commands: show ip ssh config}
    register: SshCfg

  - name: Display SSH Config
    debug: var=SshCfg.stdout_lines[0]
