---
- name: Get This Template Info
  uri: {url: '{{AwxApi}}/job_templates/{{awx_job_template_id}}/'}
  register: rThisTemplate

- name: Initial AWX System Host Tasks
  block:
  - name: Backup 'icx_awx_mgmt' and Clear Host Facts
    block:
    - {name: Store Facts, set_fact: {HostFacts: '{{icx_awx_mgmt|default({})}}'}}
    - {name: Clear Host Facts, meta: clear_facts}
    when: rThisTemplate.json.use_fact_cache

  - name: Gather Host Facts
    setup: gather_subset=!all,!min,network
    register: rGather
    connection: ssh
    ignore_unreachable: true
    ignore_errors: true
    vars:
      ansible_user: '{{awxssh_user|default(prompt_awxcli_user)}}'
      ansible_ssh_pass: '{{awxssh_pass|default(prompt_awxcli_pass)}}'

  - name: Parse and Save Secondary Physical Interface Facts
    set_fact: {PhysIntInfo: '{{PhysIntInfo|default([]) + [tIntInfo]}}'}
    loop: '{{ansible_interfaces|select("match", "^e")|list}}'
    loop_control: {loop_var: tInt}
    vars:
      tIntFacts: "{{vars['ansible_'~tInt]}}"
      tIntIp: '{{tIntFacts.ipv4.address|default()}}'
      tIntPrefix: '{{tIntFacts.ipv4.netmask|default()|iptest("get_cidr")}}'
      tCfgd: '{{tIntFacts.ipv4.address is defined}}'
      tIpAdd: "{{tIntIp}}/{{tIntPrefix}}"
      tIntInfo: {interface: '{{tInt}}', address: "{{tIpAdd if tCfgd else ''}}"}
    when:
      - not rGather.failed|default(true)
      - tIntIp != ansible_host

  - name: Clear Gathered Facts and Restore 'icx_awx_mgmt'
    block:
    - {name: Clear Host Facts, meta: clear_facts}

    - name: Restore Host Facts
      set_fact: {icx_awx_mgmt: '{{HostFacts}}', cacheable: true}
    when: rThisTemplate.json.use_fact_cache

  - name: Check Errors
    assert: {that: not rGather.failed|default(true), fail_msg: "{{tFailMsg}}"}
    vars: {tFailMsg: '{{rNetIntList.msg|default("Error gathering facts")}}'}

  - name: Add SSH Python Interpreter to Host Facts
    set_fact: {icx_awx_mgmt: '{{HostFacts|combine(tSshInt)}}', cacheable: true}
    vars:
      tFacts: '{{rGather.ansible_facts}}'
      tPyInt: '{{tFacts.discovered_interpreter_python|default("auto")}}'
      tSshInt: {ssh_interpreter: '{{tPyInt}}'}
    when: rThisTemplate.json.use_fact_cache
  when: awxssh_user|default(prompt_awxcli_user) is defined

- name: Get Python Packages
  pip_package_info: {clients: ['pip', 'pip3']}
  register: rPipInfo

- name: Install 'pexpect' Packages
  pip: {name: pexpect, extra_args: --retries 0}
  when:
    - rPipInfo.pip.pexpect is not defined
    - rPipInfo.pip3.pexpect is not defined

- name: Store Credentials
  block:
  - name: Get Credentials
    uri:
      url: '{{AwxApi}}/job_templates/{{rThisTemplate.json.id}}/credentials/'
    register: rThisTemplateCreds

  - name: Store Credentials
    set_fact: {Credential: "id: {{rThisTemplateCreds.json.results[idx].id}}"}
    loop: "{{range(0, rThisTemplateCreds.json.results|length)|list}}"
    loop_control: {index_var: idx}
    register: rTemplateCreds
  when: not rThisTemplate.json.ask_credential_on_launch

- name: Set Flag to Update Image Management Templates
  set_fact: {DoImgMgmt: '{{tAmUpdate or tImUpdate}}'}
  vars:
    tAmNotRmv: '{{"remove" not in prompt_mgmt_role|default()|lower}}'
    tAmReqUpt: '{{prompt_update_img_mgmt|default(false)}}'
    tImgDirDefined: '{{ImgMgmtDir|default("null", true) != "null"}}'
    tIsAm: '{{IsAwxTmpltMgmt|default(false)}}'
    tIsIm: '{{IsImgMgmt|default(false)}}'
    tAmUpdate: '{{tIsAm and tAmNotRmv and tImgDirDefined and tAmReqUpt}}'
    tImUpdate: '{{tIsIm and tImgDirDefined}}'
