---
- name: Image-Flash-Copy - Verify Connectivity to Device
  wait_for:
    host: '{{ansible_host}}'
    port: 22
    timeout: 30
  delegate_to: localhost

- name: Image-Flash-Copy - Gather Switch Info
  icx_facts: {gather_subset: hardware}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable

- name: Image-Flash-Copy - Assert Switch Access
  assert:
    that: ansible_net_model|default("null", true) != "null"
    fail_msg: "Failed to access switch"

- name: Image-Flash-Copy - Import File Entry Variable File
  include_vars: '{{template_image_repo_dir}}/host_vars/all.yml'
  failed_when: false

- name: Image-Flash-Copy - Check Status of Variable File Load
  assert:
    that: ansible_image_repo_files is defined
    fail_msg:
      - "Error loading {{template_image_repo_dir}}/host_vars/all.yml"
      - "Run the 'Image-Management' template to rebuild variable file"

- name: Image-Flash-Copy - Find File Entry
  set_fact: {FileEntry: '{{ansible_image_repo_files[idx]}}'}
  loop: '{{ansible_image_repo_files}}'
  loop_control: {index_var: idx}
  when: item.filename == prompt_flash_copy_filename

- name: Image-Flash-Copy - Verify Valid File
  assert:
    that: FileEntry is defined
    fail_msg: "ERROR: File named {{prompt_flash_copy_filename}} not found."

- name: Image-Flash-Copy - Assert Image Compatibility
  assert:
    that: ansible_net_model|regex_search("ICX[0-9]*") in FileEntry.supported_platforms
    fail_msg: "ERROR: {{IcxImg}} not compatible with {{ansible_net_model}}"
  vars: {IcxImg: '{{prompt_flash_copy_filename}}'}

- name: Image-Flash-Copy - Auto Select Boot Image Entry
  set_fact: {BootEntry: '{{item}}'}
  loop: '{{ansible_image_repo_boot_files}}'
  when:
    - prompt_bootflash_copy_filename|default() == "Auto Select"
    - not FileEntry.is_ufi|bool
    - FileEntry.supported_bootrom_ver == item.software_version
    - ansible_net_model|regex_search("ICX[0-9]*") in item.supported_platforms

- name: Image-Flash-Copy - User Selected Boot Image Entry
  set_fact: {BootEntry: '{{item}}'}
  loop: '{{ansible_image_repo_boot_files}}'
  when:
    - prompt_bootflash_copy_filename|default() == item.filename
    - not FileEntry.is_ufi|bool
    - ansible_net_model in item.supported_platforms

- name: Image-Flash-Copy - Set Partition
  set_fact: {FlPart: '{{tFlPart|regex_replace("^([a-z]{3}).*$", "\1")}}'}
  vars: {tFlPart: '{{prompt_flash_part|lower|default(sec)}}'}

- name: Image-Flash-Copy - Get Current Switch Version - ansible_net_image
  set_fact: {CurSwVer: '{{ansible_net_image|regex_replace(BinVerRe, "\1.\2.\3")}}'}
  when: ansible_net_image|default("null", true) != "null"

- name: Image-Flash-Copy - Get Current Switch Version - ansible_net_version
  set_fact: {CurSwVer: '{{ansible_net_version|regex_search(ShVerRe)}}'}
  when:
    - CurSwVer|default("null", true) == "null"
    - ansible_net_version|default("null", true) != "null"

- name: Image-Flash-Copy - Intermediate Image Setup
  block:
  - name: Image-Flash-Copy - Assert Existence of Intermediate Image
    assert:
      that: FileEntry.intermediate_image|default("null", true) != "null"
      fail_msg: 
        - "ERROR: Cannot update to {{FileEntry.software_version}} from {{CurSwVer}}"
        - "without an intermediate version."
        - "Non-UFI 8.0.80 {{FileEntry.image_type}} image needs to be installed in image repo"

  - name: Image-Flash-Copy - Find File Entry
    set_fact: {ImdFileEntry: '{{item}}'}
    loop: '{{ansible_image_repo_files}}'
    when: item.path == FileEntry.intermediate_image

  - name: Image-Flash-Copy - Get Intermediate Boot Image Entry
    set_fact: {ImdBootEntry: '{{item}}'}
    loop: '{{ansible_image_repo_boot_files}}'
    when:
      - item.software_version == "10.1.14"
      - ansible_net_model|regex_search("ICX[0-9]*") in item.supported_platforms

  - name: Image-Flash-Copy - Warn on no Bootrom
    debug: {msg: '{{ansible_net_model}} bootrom for 8.0.80 not found'}
    when: ImdBootEntry is not defined

  - name: Image-Flash-Copy - Intermediate Image Config
    set_fact: {ScpCpCfg: "{{tVar}}"}
    vars:
      tVar:
        - ScpFileEntry: '{{ImdFileEntry}}'
          ScpBootPath: '{{ImdBootEntry.path|default("null", true)}}'
  vars: {CurSwVer: '{{ansible_net_image|regex_replace(BinVerRe, "\1.\2.\3")}}'}
  when:
    - CurSwVer is version('8.0.80', '<')
    - FileEntry.software_version is version('8.0.90', '>=')

- name: Image-Flash-Copy - Image Config
  set_fact:
    ScpCpCfg: '{{ScpCpCfg|default([])}} + {{tVar}}'
  vars:
    tVar:
      - ScpFileEntry: '{{FileEntry}}'
        ScpBootPath: '{{BootEntry.path|default("null", true)}}'

- name: Image-Flash-Copy - SCP Copy to Switch Tasks
  include_tasks: scp_copy_to_switch.yml
  loop: '{{ScpCpCfg}}'
  loop_control: {loop_var: ScpCpEntry}
  vars:
    BootPart: '{{FlPart}}'
    BootPrefChange: '{{prompt_flash_change_boot}}'
    ReloadDevice: '{{prompt_flash_reload}}'
    ReloadTimeout: '{{template_flash_reload_timeout|default(600)}}'
    ScpBootPath: '{{ScpCpEntry.ScpBootPath}}'
    ScpFileEntry: '{{ScpCpEntry.ScpFileEntry}}'
    ScpTimeout: "{{template_flash_copy_timeout|default(300)}}"

- name: Image-Flash-Copy - Reload Device
  block:
  - name: Image-Flash-Copy - Get Post-Boot Version Information
    icx_command: {commands: show version}
    register: IcxVersion

  - name: Image-Flash-Copy - Show Version
    debug: {msg: '{{IcxVersion.stdout_lines[0]}}'}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
  when: prompt_flash_reload|bool
