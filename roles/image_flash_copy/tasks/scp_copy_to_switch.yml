- name: Get Switch Information
  icx_facts: {gather_subset: hardware}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable

- name: Check Bootrom for Compatibility
  block:
  - name: Get Current Boot Version
    icx_command: {commands: show flash | include Boot}
    register: rIcxShFlash
    connection: network_cli
    vars:
      ansible_network_os: icx
      ansible_become: true
      ansible_become_method: enable

  - name: Check Bootrom Compatibility with New Image
    assert:
      that: ScpFileEntry.software_version is version(tMaxCompVer, '<=')
      msg: "ERROR: Bootrom {{tCurVer}} incompatible with {{ImgEntry.filename}}"
    vars:
      tImgName: '{{ImgEntry.filename}}'
      tBootVerRe: '[0-9]{2}\.[0-9]{1}\.[0-9]{1,2}'
      tCurVer: '{{rIcxShFlash.stdout_lines[0][0]|regex_search(tBootVerRe)}}'
      tMaxCompVer: '{{(BootCompatTbl|selectattr("boot_version", "==", tCurVer)
                                    |list|last).max_comp_ver|default("null")}}'
    when: tMaxCompVer != "null"
  when:
    - not ScpFileEntry.is_ufi|bool
    - ScpBootPath == "null"

- name: Change Boot Preference
  block:
  - name: Get Current Boot Preference from Switch
    icx_command: {commands: show boot-preference}
    register: rCurBootPref

  - name: Check if Boot Preference Change is Needed
    block:
    - name: Remove Boot Statements
      icx_config: {lines: 'no boot system flash {{item}}', save_when: changed}
      with_items:
        - pri
        - sec
      when:
        - '"use default" not in FirstPart'
        - item in FirstPart or item in rCurBootPref.stdout_lines[0][2]|lower

    - name: Configure Boot Priority
      icx_config: {lines: 'boot sys fl {{BootPart}}', save_when: changed}
      when: '"pri" not in BootPart'
    vars: {FirstPart: '{{rCurBootPref.stdout_lines[0][1]|lower}}'}
    when: ("use default" not in FirstPart and BootPart not in FirstPart) or
          ("use default" in FirstPart and "sec" in BootPart)
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
  when: BootPrefChange|bool

- name: Save SSH Username
  set_fact: {RemUser: '{{ansible_user}}'}
  connection: ssh

- name: Import Files
  fetch: {src: '{{item}}', dest: '/tmp/{{inventory_hostname}}/', flat: yes}
  connection: ssh
  register: rFetch
  vars:
    ansible_python_interpreter: '{{AwxHostInterpreter}}'
    ansible_host: '{{prompt_image_repo_address}}'
    ansible_user: '{{awxssh_user|default(prompt_awxcli_user)}}'
    ansible_ssh_pass: '{{awxssh_pass|default(prompt_awxcli_pass)}}'
  with_items:
    - '{{ScpBootPath}}'
    - '{{ScpFileEntry.path}}'

- name: Copy Image(s) to Switch Flash
  expect:
    command: scp {{tOpts}} {{tKex}} {{item.src}} {{item.dest}}
    echo: yes
    timeout: '{{ScpTimeout}}'
    responses:
      'Password:': "{{ansible_password}}"
  no_log: true
  loop: '{{tCpFiles}}'
  vars:
    tOpts: "-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
    tKex: "-o KexAlgorithms=+diffie-hellman-group1-sha1"
    tCpFiles:
    - src: '{{rFetch.results[0].dest|default("null", true)}}'
      dest: "{{RemUser}}@{{ansible_host}}:flash:bootrom"
    - src: '{{rFetch.results[1].dest|default("null", true)}}'
      dest: "{{RemUser}}@{{ansible_host}}:flash:{{BootPart}}:{{ScpFileEntry.filename}}"
  register: CpStatus
  failed_when: CpStatus.rc != 0 and CpStatus.rc != 1
  when: item.src != "null"

- name: Clean Up Temp Files
  file: {path: '/tmp/{{inventory_hostname}}', state: absent}

- name: Reboot Device
  block:
  - name: Reboot Device
    include_tasks: reboot_device.yml
    loop: '{{range(0, 10)|list}}'
    when: RebootSuccess|default('null', true) == 'null'

  - name: Wait For Boot Completion
    wait_for: {delay: 30, timeout: '{{RebootTimeout}}'}
    delegate_to: localhost

  - {name: Post-Boot Info, icx_facts: {gather_subset: hardware}}

  - name: Ensure Successful Image Update
    assert:
      that: ImageName|lower in ScpFileEntry.filename|lower
      msg:
        - "ERROR: Failed to boot into {{ScpFileEntry.filename}}"
        - "Current image: {{ansible_net_image}}"
    vars: {ImageName: '{{ansible_net_image|regex_replace(".bin")}}'}

  - {name: Reset Reboot Return Variable, set_fact: {RebootSuccess: }}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
  when: RebootAllowed
