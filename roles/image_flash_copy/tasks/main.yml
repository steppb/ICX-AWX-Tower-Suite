---
- name: Verify Connectivity to Device
  wait_for: {host: '{{ansible_host}}', port: 22, timeout: 30}
  delegate_to: localhost

- name: Gather Switch Info
  icx_facts: {gather_subset: hardware}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable

- name: Assert Switch Access
  assert:
    that: ansible_net_model|default("null", true) != "null"
    fail_msg: "Failed to access switch"

- name: Set ICX Model
  set_fact: {IcxModel: '{{ansible_net_model|regex_search("ICX[0-9]*")}}'}

- name: Get Image From Version
  block:
  - name: Find File Entry from Version
    set_fact: {ImgEntry: '{{tImg[0]|default()}}'}
    vars:
      tImg: '{{ImgRepoFiles
              |selectattr("supported_platforms", "contains", IcxModel)
              |selectattr("software_version", "==", prompt_flash_copy_version)
              |selectattr("img_type", "==", prompt_image_mode|lower)|list}}'

  - name: Verify Valid File Entry
    assert:
      that: ImgEntry|default("null", true) != "null"
      fail_msg: 'ERROR: Could not find {{prompt_flash_copy_version}} {{prompt_image_mode}}
                 image for {{ansible_net_model|regex_search("ICX[0-9]*")}}'
      success_msg: "{{ImgEntry.filename|default()}} found."
  when: prompt_flash_copy_version|default("null", true) != "null" and
        prompt_image_mode|default("null", true) != "null"

- name: Get Image From Filename
  block:
  - name: Find File Entry
    set_fact:
      ImgEntry: '{{(bFL|selectattr("filename", "==", bImg)|list)[0]|default()}}'

  - name: Verify Valid File
    assert:
      that: ImgEntry|default("null", true) != "null"
      fail_msg: "ERROR: File named {{bImg}} not found."
      success_msg: "{{bImg}} found."

  - name: Assert Image Compatibility
    assert:
      that: ansible_net_model|regex_search("ICX[0-9]*") in ImgEntry.supported_platforms
      fail_msg: "ERROR: {{bImg}} not compatible with {{ansible_net_model}}"
  vars: {bImg: '{{prompt_flash_copy_filename}}', bFL: '{{ImgRepoFiles}}'}
  when: ImgEntry is not defined

- name: Auto Select Boot Image
  set_fact: {BootEntry: '{{tBootEntry[0]|default()}}'}
  vars:
    tBootVer: '{{ImgEntry.supported_bootrom_ver}}'
    tBootEntry: '{{ImgRepoBootFiles
                 |selectattr("supported_platforms", "contains", IcxModel)
                 |selectattr("software_version", "==", tBootVer)|list}}'
  when:
    - prompt_bootflash_copy_filename|default() == "Auto Select"
    - not ImgEntry.is_ufi|bool

- name: User Selected Boot Image Entry
  set_fact: {BootEntry: '{{tBootList[0]}}'}
  vars:
    tBootList: '{{ImgRepoBootFiles
                 |selectattr("filename", "==", prompt_bootflash_copy_filename)
                 |selectattr("supported_platforms", "contains", "IcxModel")
                 |list}}'
  when:
    - prompt_bootflash_copy_filename|default("null", true) != "null"
    - prompt_bootflash_copy_filename != "Auto Select"
    - prompt_bootflash_copy_filename != "None"
    - not ImgEntry.is_ufi|bool

- name: Get Current Switch Version - ansible_net_image
  set_fact: {CurSwVer: '{{ansible_net_image|regex_replace(BinVerRe, "\1.\2.\3")}}'}
  when: ansible_net_image|default("null", true) != "null"

- name: Get Current Switch Version - ansible_net_version
  set_fact: {CurSwVer: '{{ansible_net_version|regex_search(ShVerRe)}}'}
  when:
    - CurSwVer|default("null", true) == "null"
    - ansible_net_version|default("null", true) != "null"

- name: Intermediate Image Setup
  block:
  - name: Assert Existence of Intermediate Image
    assert:
      that: ImgEntry.intermediate_image|default("null", true) != "null"
      fail_msg:
        - "ERROR: Cannot update to {{ImgEntry.software_version}} from {{CurSwVer}}"
        - "without an intermediate version."
        - "Non-UFI 8.0.80 {{ImgEntry.img_type}} image needs to be installed in image repo"

  - name: Find File Entry
    set_fact:
      ImdFileEntry: '{{(tFL|selectattr("path", "==", tPath)|list)[0]|default()}}'
    vars: {tFL: '{{ImgRepoFiles}}', tPath: '{{ImgEntry.intermediate_image}}'}

  - name: Get Intermediate Boot Image Entry
    set_fact: {ImdBootEntry: '{{tImdBootEntry}}'}
    vars:
      tImdBootEntry: '{{ImgRepoBootFiles
                       |selectattr("supported_platforms", "contains", IcxModel)
                       |selectattr("software_version", "==", "10.1.14")|list)}}'

  - name: Warn on no Bootrom
    debug: {msg: '{{ansible_net_model}} bootrom for 8.0.80 not found'}
    when: ImdBootEntry|default("null", true) == "null"

  - name: Intermediate Image Config
    set_fact: {ScpCpCfg: "{{tVar}}"}
    vars:
      tVar:
        - ScpFileEntry: '{{ImdFileEntry}}'
          ScpBootPath: '{{ImdBootEntry.path|default("null", true)}}'
  vars: {CurSwVer: '{{ansible_net_image|regex_replace(BinVerRe, "\1.\2.\3")}}'}
  when:
    - CurSwVer is version('8.0.80', '<')
    - ImgEntry.software_version is version('8.0.90', '>=')

- name: Image Config (Downgrade from 08.0.90)
  set_fact:
    UfiDowngrade: true
    ScpCpCfg:
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: "null"
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: '{{BootEntry.path}}'
  when:
    - CurSwVer is version('8.0.90', '>=')
    - not ImgEntry.is_ufi|bool
    - BootEntry.path|default("null", true) != "null"

- name: Image Config
  set_fact: {ScpCpCfg: '{{ScpCpCfg|default([])}} + {{tVar}}'}
  vars:
    tVar:
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: '{{BootEntry.path|default("null", true)}}'
  when: not UfiDowngrade|default(false, true)|bool

- name: SCP Copy to Switch Tasks
  include_tasks: scp_copy_to_switch.yml
  loop: '{{ScpCpCfg}}'
  loop_control: {loop_var: ScpCpEntry}
  vars:
    BootPrefChange: '{{prompt_flash_change_boot}}'
    ReloadDevice: '{{prompt_flash_reload}}'
    RldTimeout: '{{template_flash_reload_timeout|default(600)}}'
    ScpBootPath: '{{ScpCpEntry.ScpBootPath}}'
    ScpFileEntry: '{{ScpCpEntry.ScpFileEntry}}'
    ScpTimeout: "{{template_flash_copy_timeout|default(300)}}"

- name: Post Boot Info
  block:
  - name: Get Post-Boot Version Information
    icx_command: {commands: show version}
    register: IcxVersion

  - name: Show Version
    debug: {msg: '{{IcxVersion.stdout_lines[0]}}'}
  connection: network_cli
  vars: {ansible_network_os: icx, ansible_become: true, ansible_become_method: enable}
  when: prompt_flash_reload|bool
