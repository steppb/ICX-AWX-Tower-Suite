---
- {name: Verify Connectivity to Device, wait_for: , delegate_to: localhost}

- name: Gather Switch Info
  icx_facts: {gather_subset: hardware}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable

- name: Assert Switch Access
  assert:
    that: tAccessOk and tVerOk
    fail_msg: '{{tErr|select()|list}}'
  vars:
    tAccessOk: '{{ansible_net_model|default("null", true) != "null"}}'
    tNetVerOk: '{{ansible_net_version|default("null", true) != "null"}}'
    tNetImgOk: '{{ansible_net_image|default("null", true) != "null"}}'
    tVerOk: '{{tNetVerOk or tNetImgOk}}'
    tAccessErr: "ERROR: Failed to access switch"
    tVerErr: "ERROR: Unable to read FastIron version from switch"
    tErr:
      - '{{tAccessErr if not tAccessOk else []}}'
      - '{{tVerErr if not tVerOk else []}}'

- {name: Load Boot Compatibility Table, include_vars: boot_compat_table.yml}

- name: Set ICX Model
  set_fact: {IcxModel: '{{ansible_net_model|regex_search("ICX[0-9]*")}}'}

- name: Get Image From Version
  block:
  - name: Find File Entry from Version
    set_fact: {ImgEntry: '{{tImg[0]|default()}}'}
    vars:
      tImg: '{{ImgRepoFiles
              |selectattr("supported_platforms", "contains", IcxModel)
              |selectattr("software_version", "==", prompt_flash_copy_version)
              |selectattr("img_type", "==", prompt_image_type|lower)|list}}'

  - name: Verify Valid File Entry
    assert:
      that: ImgEntry|default("null", true) != "null"
      fail_msg: 'ERROR: Could not find {{prompt_flash_copy_version}}
                 {{prompt_image_type}} image for {{IcxModel}}'
      success_msg: "{{ImgEntry.filename|default()}} found."
  when: prompt_flash_copy_version|default("null", true) != "null" and
        prompt_image_type|default("null", true) != "null"

- name: Get Image From Filename
  block:
  - name: Find File Entry
    set_fact:
      ImgEntry: '{{(bFL|selectattr("filename", "==", bImg)|list)[0]|default()}}'

  - name: Verify Valid File
    assert:
      that: ImgEntry|default("null", true) != "null"
      fail_msg: "ERROR: File named {{bImg}} not found."
      success_msg: "{{bImg}} found."

  - name: Assert Image Compatibility
    assert:
      that: ansible_net_model|regex_search("ICX[0-9]*") in ImgEntry.supported_platforms
      fail_msg: "ERROR: {{bImg}} not compatible with {{ansible_net_model}}"
  vars: {bImg: '{{prompt_flash_copy_filename}}', bFL: '{{ImgRepoFiles}}'}
  when: ImgEntry is not defined

- name: Auto Select Boot Image
  set_fact: {BootEntry: '{{tBootEntry[0]|default()}}'}
  vars:
    tBootVer: '{{ImgEntry.supported_bootrom_ver}}'
    tBootEntry: '{{ImgRepoBootFiles
                  |selectattr("supported_platforms", "contains", IcxModel)
                  |selectattr("software_version", "==", tBootVer)|list}}'
  when:
    - prompt_bootflash_copy_filename|default() == "Auto Select"
    - not ImgEntry.is_ufi|bool

- name: User Selected Boot Image Entry
  set_fact: {BootEntry: '{{tBootList[0]}}'}
  vars:
    tBootList: '{{ImgRepoBootFiles
                 |selectattr("filename", "==", prompt_bootflash_copy_filename)
                 |selectattr("supported_platforms", "contains", "IcxModel")
                 |list}}'
  when:
    - prompt_bootflash_copy_filename|default("null", true) != "null"
    - prompt_bootflash_copy_filename != "Auto Select"
    - prompt_bootflash_copy_filename != "None"
    - not ImgEntry.is_ufi|bool

- name: Get Current Switch Version
  set_fact:
    CurSwVer: '{{ansible_net_image|regex_replace(regx_bin_ver, "\1.\2.\3")
                 if ansible_net_image|default("null", true) != "null"
                 else ansible_net_version|regex_search(regx_show_ver)}}'

- name: Intermediate Image Setup
  block:
  - name: Check Existence of Intermediate Image
    assert:
      that: tHasImg and RebootAllowed
      fail_msg: '{{tNoImgMsg if not tHasImg else tNoRebootMsg}}'
    vars:
      tHasImg: '{{ImgEntry.intermediate_image|default("null", true) != "null"}}'
      tNoImgMsg:
        - "ERROR: Cannot update to {{ImgEntry.software_version}} from"
        - "{{CurSwVer}} without an intermediate version."
        - "Install non-UFI 8.0.80 {{ImgEntry.img_type}} image in image repo"
      tNoRebootMsg: "ERROR: Reboot required for two-step upgrade"

  - name: Find File Entry for Intermediate Image
    set_fact:
      ScpCpCfg:
        - ScpFileEntry: '{{tImdImgEntry[0]|default()}}'
          ScpBootPath: '{{tImdBootEntry[0].path|default()}}'
    vars:
      tPath: '{{ImgEntry.intermediate_image}}'
      tImdImgEntry: '{{ImgRepoFiles|selectattr("path", "==", tPath)|list}}'
      tImdBootEntry: '{{ImgRepoBootFiles
                       |selectattr("supported_platforms", "contains", IcxModel)
                       |selectattr("software_version", "==", "10.1.14")|list}}'

  - name: Warn on no Bootrom
    debug: {msg: '{{IcxModel}} bootrom for 8.0.80 not found'}
    when: ScpCpCfg[0].ScpBootPath|default("null", true) == "null"
  when:
    - CurSwVer is version('08.0.80', '<')
    - ImgEntry.software_version is version('08.0.90', '>=')

- name: SCP Copy to Switch Tasks
  include_tasks: scp_copy_to_switch.yml
  loop: '{{bScpCpCfg}}'
  loop_control: {loop_var: ScpCpEntry}
  vars:
    bUfiDowngrade: '{{CurSwVer is version("8.0.90", ">=")
                      and not ImgEntry.is_ufi
                      and BootEntry.path|default("null", true) != "null"}}'
    bDowngradeCfg:
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: "null"
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: '{{BootEntry.path|default("null", true)}}'
    bScpCfg:
      - ScpFileEntry: '{{ImgEntry}}'
        ScpBootPath: '{{BootEntry.path|default("null", true)}}'
    bCfg: '{{bDowngradeCfg if bUfiDowngrade else bScpCfg}}'
    bScpCpCfg: '{{ScpCpCfg|default([])}} + {{bCfg}}'
    ScpBootPath: '{{ScpCpEntry.ScpBootPath}}'
    ScpFileEntry: '{{ScpCpEntry.ScpFileEntry}}'

- name: Post Boot Info
  block:
  - {name: Get Version, icx_command: {commands: show version}, register: rSwVer}
  - {name: Show Version, debug: {msg: '{{rSwVer.stdout_lines[0]}}'}}
  connection: network_cli
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
  when: RebootAllowed
