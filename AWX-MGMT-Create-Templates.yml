#! Description: Creates a Job Template for each playbook in a project.
# ====================
# Required Variables:
# <template_project_name>: Name of project to add job templates to.
# <template_project_inventory>: Name of inventory to be added to new job templates.
# <awxlogin_user> & <awxlogin_pass>: Login credentials for REST API.
#
# Optional Variables:
# <template_validate_certs>
---
- hosts: all
  connection: local
  gather_facts: no
  module_defaults:
    uri:
      validate_certs: '{{template_validate_certs}}'
      method: GET
      user: '{{awxlogin_user}}'
      password: '{{awxlogin_pass}}'
      force_basic_auth: yes
  vars:
    AwxApi: https://{{ansible_host}}/api/v2
    YamlExt: '.yml'
    DescVar: '#! Description: '
    NewlineVar: '\\\\n'
    template_validate_certs: no

  tasks:
  - {name: Get Project Directory, uri: {url: '{{AwxApi}}/config/'}, register: AwxCfg}

  - name: Get Project Info
    uri: {url: '{{AwxApi}}/projects/?name={{template_project_name|urlencode}}'}
    register: PjInfo
    failed_when: PjInfo.json.results[0] is not defined

  - name: Get Inventory Info
    uri: {url: '{{AwxApi}}/inventories/?name={{template_project_inventory|urlencode}}'}
    register: InvInfo

  - name: Set Project Variables
    set_fact:
      PjId: "{{PjInfo.json.results[0].id}}"
      PjPath: "{{AwxCfg.json.project_base_dir}}/{{PjInfo.json.results[0].local_path}}"
      InvId: "{{InvInfo.json.results[0].id}}"

  - name: Get Playbook List
    uri: {url: '{{AwxApi}}/projects/{{PjId}}/playbooks/'}
    register: PbList

  - name: Get List of Ignored Playbooks
    lineinfile:
      path: '{{PjPath}}/{{item}}'
      regex: '^#! AwxMgmtIgnore$'
      line: '#! AwxMgmtIgnore'
    changed_when: false
    check_mode: yes
    loop: "{{PbList.json}}"
    register: AwxMgmtIgnored

  - name: Get Playbook Info
    shell: cat {{PjPath}}/{{item}} | grep '^# ' && echo '---'
    changed_when: false
    failed_when: false
    loop: "{{PbList.json}}"
    loop_control: {index_var: idx}
    register: ExtraVar
    when: AwxMgmtIgnored.results[idx].msg != ''

  - name: Get Playbook Descriptions
    shell: cat {{PjPath}}/{{item}} | grep '^#! Description'
    register: description
    loop: "{{PbList.json}}"
    loop_control: {index_var: idx}
    changed_when: false
    failed_when: false
    when: AwxMgmtIgnored.results[idx].msg != ''

  - name: Get Existing Template List
    uri: {url: '{{AwxApi}}/job_templates/?name={{item|regex_replace(YamlExt)}}'}
    loop: '{{PbList.json}}'
    loop_control: {index_var: idx}
    register: ExistingTemplates
    when: AwxMgmtIgnored.results[idx].msg != ''

  - name: Build Template Payload
    set_fact:
      template_struct: 
        name: "{{item|regex_replace(YamlExt)}}"
        description: "{{description.results[idx].stdout|regex_replace(DescVar)}}"
        extra_vars: "{{ExtraVar.results[idx].stdout}}"
        project: "{{PjId}}"
        inventory: "{{InvId}}"
        playbook: "{{item}}"
        ask_credential_on_launch: true
        ask_inventory_on_launch: '{{template_inventory_prompt|default(true)}}'
    loop: "{{PbList.json}}"
    loop_control: {index_var: idx}
    register: JobTemplates
    when:
      - AwxMgmtIgnored.results[idx].msg != ''
      - ExistingTemplates.results[idx].json.results[0] is not defined

  - name: Create Templates
    uri:
      url: '{{AwxApi}}/job_templates/'
      method: POST
      headers: {Content-Type: "application/json"}
      body: "{{JobTemplates.results[idx].ansible_facts.template_struct}}"
      body_format: json
      status_code: 201
      timeout: 60
    loop: "{{PbList.json}}"
    loop_control: {index_var: idx}
    register: NewJobTemplates
    when: JobTemplates.results[idx].ansible_facts is defined

  - name: Scrape Playbook Prompts
    shell: "grep '^#! Prompt' {{PjPath}}/{{NewJobTemplates.results[idx].json.playbook}} | sed 's/^.*Prompt: //g'"
    failed_when: false
    changed_when: false
    loop: '{{PbList.json}}'
    loop_control: {index_var: idx}
    register: RawPrompts
    when:
      - NewJobTemplates.results[idx].status is defined
      - NewJobTemplates.results[idx].status == 201

  - name: Prepare Survey Prompt Payload
    set_fact:
      template_url: 'https://{{ansible_host}}{{NewJobTemplates.results[idx].json.url}}'
      payload:
        name: ''
        description: ''
        spec: "{{tPrompt.stdout_lines[0]|from_yaml|regex_replace(NewlineVar, '\\\\n')}}"
    loop: '{{PbList.json}}'
    loop_control: {index_var: idx}
    register: PbPrompts
    when: RawPrompts.results[idx].stdout_lines[0] is defined
    vars: {tPrompt: '{{RawPrompts.results[idx]}}'}

  - name: Add Survey Prompts
    uri:
      url: '{{PbPrompts.results[idx].ansible_facts.template_url}}survey_spec/'
      method: POST
      headers: {Content-Type: "application/json"}
      body: "{{tPayload|regex_replace('@colon',':')|regex_replace('@question','?')}}"
      body_format: json
      timeout: 60
    loop: '{{PbList.json}}'
    loop_control: {index_var: idx}
    register: PromptStatus
    when: PbPrompts.results[idx].ansible_facts is defined
    vars: {tPayload: '{{PbPrompts.results[idx].ansible_facts.payload}}'}

  - name: Enable Survey Prompts
    uri:
      url: '{{PbPrompts.results[idx].ansible_facts.template_url}}'
      method: PATCH
      headers: {Content-Type: "application/json"}
      body: {survey_enabled: true}
      body_format: json
      timeout: 60
    loop: '{{PbList.json}}'
    loop_control: {index_var: idx}
    when:
      - PromptStatus.results[idx].status is defined
      - PromptStatus.results[idx].status == 200
