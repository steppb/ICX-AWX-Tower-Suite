---
- hosts: all
  connection: local
  gather_facts: no
  module_defaults:
    uri:
      validate_certs: '{{host_validate_certs|default(false)}}'
      method: GET
      user: '{{awxlogin_user}}'
      password: '{{awxlogin_pass}}'
      force_basic_auth: yes
      timeout: 60
  vars:
    AwxApi: https://{{ansible_host}}/api/v2
    MgmtFunc: ZTP Management
    ZtpDefPass: 'PasswordPassword'
    ZtpInv: '{{prompt_ztp_inventory}}'
    ZtpCfgCur: '{{icx_awx_mgmt.ztp|default()}}'
    DhcpCfgOld: '{{ZtpCfgCur|selectattr("name", "==", ZtpInv)|list}}'
    IsZtp: true
    IsZtpMgmt: '{{this_jt_name == "ZTP-Management"}}'
    IsZtpRT: '{{this_jt_name == "ZTP-Regen-AuthToken"}}'

  pre_tasks:
  - name: Check Secondary Interface Config
    block:
    - name: Validate IP Variable
      assert: {that: tFmtOk and tNetOk, fail_msg: '{{tErr|select()|list}}'}
      vars:
        tFmtOk: '{{prompt_ztp_int_ipaddr|iptest("is_net4")}}'
        tNetOk: '{{prompt_ztp_int_ipaddr|iptest("get_addr") != ansible_host}}'
        tFmtErr: "ERROR: Secondary interface address improperly formatted"
        tNetErr: "ERROR: New IP cannot be the same as AWX Server"
        tErr:
          - '{{tFmtErr if not tFmtOk else []}}'
          - '{{tNetErr if not tNetOk else []}}'
      when: prompt_ztp_int_ipaddr is defined

    - name: Check Secondary Interface Route Config
      block:
      - name: Validate IP Route Variables
        assert: {that: tOk, fail_msg: '{{tErr|select()|list}}'}
        vars:
          tIpOk: '{{bIntIp|default("null", true) != "null"}}'
          tRtrOk: '{{prompt_ztp_int_rtr|iptest("in_net", bIntIp)}}'
          tNetFmtOk: '{{bIpRtNet|iptest("is_net4")}}'
          tRtrFmtOk: '{{prompt_ztp_int_rtr|iptest("is_addr4")}}'
          tNetOk: '{{not prompt_ztp_int_rtr|iptest("in_net", bIpRtNet)}}'
          tIpErr: "Error: No IP address on interface"
          tRtrErr: "Error: Router address {{prompt_ztp_int_rtr}} not in subnet"
          tNetFmtErr: "Error: Invalid subnet: {{prompt_ztp_int_destnet}}"
          tRtrFmtErr: "Error: Invalid router address: {{prompt_ztp_int_rtr}}"
          tNetErr: "Error: Next hop router address inside destination network"
          tOk: '{{tIpOk and tRtrOk and tNetFmtOk and tRtrFmtOk and tNetOk}}'
          tErr:
            - '{{tIpErr if not tIpOk else []}}'
            - '{{tRtrErr if not tRtrOk else []}}'
            - '{{tNetFmtErr if not tNetFmtOk else []}}'
            - '{{tRtrFmtErr if not tRtrFmtOk else []}}'
            - '{{tNetErr if not tNetOk else []}}'

      - name: Set IP Route Config
        set_fact:
          NetIntRtCfg: {dst: '{{bIpRtNet}}', rtr: '{{prompt_ztp_int_rtr}}'}
      when:
        - prompt_ztp_int_destnet|default("null", true) != "null"
        - prompt_ztp_int_rtr|default("null", true) != "null"

    - name: Set Secondary Interface Config Variables
      set_fact:
        NetIntCfg:
          interface: '{{prompt_ztp_interface.split(":")[0]}}'
          address: '{{bIntIp}}'
    vars:
      bCfgdIp: '{{prompt_ztp_interface.split(":")[1]}}'
      bIntIp: '{{prompt_ztp_int_ipaddr|default(bCfgdIp)}}'
      bIpRtNet: '{{prompt_ztp_int_destnet|iptest("get_subnet")|default()}}'
    when: prompt_ztp_interface is defined and
          (prompt_ztp_int_ipaddr is defined or
          (prompt_ztp_int_destnet is defined and
          prompt_ztp_int_rtr is defined))

  - name: Check DHCP Config
    block:
    - name: Ensure Proper DHCP Subnet and Range Provided
      assert: {that: tNetOk and tRngOk, fail_msg: '{{tErr|select()|list}}'}
      vars:
        tNetOk: '{{bDhcpNet|iptest("is_net4")}}'
        tRngOk: '{{prompt_ztp_dhcp_range|iprange("is_valid")}}'
        tNetErr: "Error: Subnet {{prompt_ztp_dhcp_subnet}} improperly formatted"
        tRngErr: "Error: Range {{prompt_ztp_dhcp_range}} improperly formatted"
        tErr:
          - '{{tNetErr if not tNetOk else []}}'
          - '{{tRngErr if not tRngOk else []}}'

    - name: Ensure DHCP Variables Within Network
      assert: {that: tRngOk and tRtrOk, fail_msg: '{{tErr|select()|list}}'}
      vars:
        tRngOk: '{{bDhcpRng|iprange("in_net", bDhcpNet)}}'
        tRtrOk: '{{prompt_ztp_dhcp_rtr is not defined or bDhcpRtrOk}}'
        tRngErr: "Error: Range {{bDhcpRng}} outside of {{bDhcpNet}}"
        tRtrErr: "Error: Default router address outside of {{bDhcpNet}}"
        tErr:
          - '{{tRngErr if not tRngOk else []}}'
          - '{{tRtrErr if not tRtrOk else []}}'

    - name: Set DHCP Variables
      set_fact:
        DhcpRtrOpt: '{{bDhcpRtrOpt if bDhcpRtrOk else ""}}'
        DhcpCfgNew:
          - name: '{{ZtpInv}}'
            subnet: '{{bDhcpNet}}'
            ip_pool: '{{bDhcpRng}}'
            router_ip: '{{bDhcpRtr}}'
    vars:
      bDhcpNet: '{{prompt_ztp_dhcp_subnet|default()|iptest("get_subnet")}}'
      bDhcpRng: '{{prompt_ztp_dhcp_range|iprange("split")|sort|default()}}'
      bDhcpRtr: '{{prompt_ztp_dhcp_rtr|default()}}'
      bDhcpRtrOk: '{{prompt_ztp_dhcp_rtr|default()|iptest("in_net", bDhcpNet)}}'
      bDhcpRtrOpt: "option routers {{bDhcpRtr}};"
    when: prompt_ztp_dhcp_subnet is defined and prompt_ztp_dhcp_range is defined

  - name: Check IP Pool Config
    block:
    - name: Ensure Proper IP Pool Subnet and Range Provided
      assert: {that: tNetOk and tRngOk, fail_msg: '{{tErr|select()|list}}'}
      vars:
        tNetOk: '{{bIpPoolNet|iptest("is_net4")}}'
        tRngOk: '{{prompt_ztp_ippool_range|iprange("is_valid")}}'
        tNetErr: "Error: Invalid subnet: {{prompt_ztp_ippool_subnet}}"
        tRngErr: "Error: Invalid range: {{prompt_ztp_ippool_range}}"
        tErr:
          - '{{tNetErr if not tNetOk else []}}'
          - '{{tRngErr if not tRngOk else []}}'

    - name: Ensure Valid IP Pool Variables
      assert: {that: tRngOk and tPoolOk, fail_msg: '{{tErr|select()|list}}'}
      vars:
        tPoolLoDhcpOk: '{{not bDhcpPool|iprange("has_addr", bIpPoolRng[0])}}'
        tPoolHiDhcpOk: '{{not bDhcpPool|iprange("has_addr", bIpPoolRng[1])}}'
        tRngOk: '{{bIpPoolRng|iprange("in_net", bIpPoolNet)}}'
        tPoolOk: '{{tPoolLoDhcpOk and tPoolHiDhcpOk}}'
        tRngErr: "Error: Range {{bIpPoolRng}} outside of {{bIpPoolNet}}."
        tPoolErr: "Error: Static IP pool overlaps with DHCP range."
        tErr:
          - '{{tRngErr if not tRngOk else []}}'
          - '{{tPoolErr if not tPoolOk else []}}'

    - name: Set IP Pool Variables
      set_fact:
        IpPoolCfg:
          static_ip_pool:
            interface: '{{prompt_ztp_ippool_int|default()}}'
            subnet: '{{bIpPoolNet}}'
            pool: '{{bIpPoolRng}}'
            next_ip: '{{bIpPoolRng[0]}}'
    vars:
      bIpPoolRng: '{{prompt_ztp_ippool_range|iprange("split")|sort|default()}}'
      bIpPoolNet: '{{prompt_ztp_ippool_subnet|iptest("get_subnet")}}'
      bDhcpPool: '{{DhcpCfgNew[0].ip_pool|default(DhcpCfgOld[0].ip_pool)}}'
    when:
      - prompt_ztp_ippool_subnet is defined
      - prompt_ztp_ippool_range is defined

  - name: Set Hostname Pool Variables
    set_fact:
      HnPoolCfg:
        hostname_pool:
          base_name: "{{prompt_ztp_hostname_base}}"
          next_name: "{{prompt_ztp_hostname_base}}01"
    when: prompt_ztp_hostname_base is defined

  roles:
  - {role: awx_management}
