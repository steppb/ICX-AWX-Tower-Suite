#! Description: Add/Remove/Replace IPv4 address on interface.
#! Prompt: [{question_name: IP Interface (For single host deployment), question_description: Enter the interface to configure as L3@colon (e.g. ve20 or e1/1/1), required: false, type: text, variable: prompt_rtr_int, min: 1, max: 1024, default: '', choices: ''}, {question_name: IPv4 Address@colon, question_description: '', required: false, type: text, variable: prompt_rtr_int_ip, min: 7, max: 15, default: '', choices: ''}, {question_name: Subnet Mask@colon, question_description: (e.g. 255.255.255.0), required: false, type: text, variable: prompt_rtr_int_mask, min: 7, max: 15, default: '', choices: ''}]
# =====================
# Note: If template is run on more than one switch, the 'host_icx_int' variable needs to be
#       defined for each host in the 'VARIABLES' section of the AWX Inventory Host page.
#       To remove an IP address from the interface, define the 'iface' field and leave the
#       'ipv4.addr' field blank.
#       Playbook will not configure interfaces if the IP address matches the IP defined in
#       'ansible_host'.
#       Prompt variables will be ignored if more than one host is in the play.
#       Host variables will take precedence over prompt variables if only one host is in play.
# 
# host_icx_int examples:
# 
# Adding multiple IP interfaces:
# ------------------------------
# host_icx_int:
#   - iface: e1/1/2
#     ipv4:
#       addr: 10.10.200.1
#       mask: 255.255.255.0
#   - iface: ve20
#     ipv4:
#       addr: 192.168.200.1
#       mask: 255.255.255.0
# ------------------------------
#
# Removing IP address from interface:
# -----------------------------------
# host_icx_int:
#   - iface: e1/1/2
#     ipv4:
#       addr:
#       mask:
# -----------------------------------
---
- hosts: all
  connection: network_cli
  gather_facts: no
  vars:
    ansible_network_os: icx
    ansible_become: true
    ansible_become_method: enable
    newline_var: "\r"
    error_parse: '^.*ConnectionError: '
    CfgLstCnt: 1

  tasks:
  - name: Check Host Variables and Setup Config List
    set_fact:
      iface: '{{item.iface}}'
      ipaddr: '{{item.ipv4.addr|default("")}}'
      ipmask: '{{item.ipv4.mask|default("")}}'
    register: HostVarCfg
    loop: '{{host_icx_int}}'
    when:
      - item.iface is defined
      - item.iface != ''
      - item.ipv4.addr is defined

  - name: Store Host Variable List
    set_fact: {ConfigList: '{{HostVarCfg.results}}', CfgLstCnt: '{{HostVarCfg.results|length}}'}
    when: HostVarCfg.results is defined

  - name: Check Prompt Variables and Setup Config List
    set_fact:
      iface: '{{prompt_rtr_int}}'
      ipaddr: '{{prompt_rtr_int_ip|default("")}}'
      ipmask: '{{prompt_rtr_int_mask|default("")}}'
    register: PromptVarCfg
    with_items: 1
    when: ansible_play_hosts|length == 1 and ConfigList is not defined and prompt_rtr_int is defined

  - name: Store Prompt Variable List
    set_fact: {ConfigList: '{{PromptVarCfg.results}}'}
    when: PromptVarCfg.results[0].ansible_facts is defined

  - name: Get IP Interface Info
    icx_command: {commands: 'show ip interface {{item.ansible_facts.iface}} | include ip address'}
    register: IpIntInfo
    loop: '{{ConfigList}}'
    when: item.ansible_facts is defined

  - name: Store IP Interface Info
    set_fact: {OldIp: '{{item.stdout[0].split(" ")[2]}}'}
    loop: '{{IpIntInfo.results}}'
    register: IpIntList
    when:
      - item.stdout[0] is defined and item.stdout[0] != ''
      - 'item.stdout[0].split(" ")[2] != ansible_host'

  - name: Remove Old IP Address
    icx_config:
      lines: no ip address {{item.ansible_facts.OldIp}}
      parents: interface {{ConfigList[idx].ansible_facts.iface}}
      save_when: changed
    loop: '{{IpIntList.results}}'
    loop_control:
      index_var: idx
    register: IcxCfgStatus
    when: 
      - ConfigList[idx].ansible_facts is defined
      - item.ansible_facts is defined
      - item.ansible_facts.OldIp != ansible_host
      - item.ansible_facts.OldIp != ConfigList[idx].ansible_facts.ipaddr

  - name: Parse Switch Error
    set_fact: {ErrMsg: "{{item.module_stderr|regex_replace('\n')|regex_replace(error_parse)}}"}
    loop: '{{IcxCfgStatus.results}}'
    when: item.rc is defined and item.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(newline_var)}}'}
    when: ErrMsg is defined

  - name: Configure Router Interface
    icx_config:
      lines: ip address {{item.ansible_facts.ipaddr}} {{item.ansible_facts.ipmask}}
      parents: interface {{item.ansible_facts.iface}} 
      save_when: changed
    loop: '{{ConfigList}}'
    loop_control:
      index_var: idx
    register: IcxCfgStatus
    failed_when: false
    when:
      - item.ansible_facts is defined
      - item.ansible_facts.ipaddr != ansible_host
      - item.ansible_facts.ipaddr != ''
      - item.ansible_facts.ipmask != ''
      - IpIntList.results[idx].ansible_facts.OldIp is not defined or IpIntList.results[idx].ansible_facts.OldIp != item.ansible_facts.ipaddr

  - name: Parse Switch Error
    set_fact: {ErrMsg: "{{item.module_stderr|regex_replace('\n')|regex_replace(error_parse)}}"}
    loop: '{{IcxCfgStatus.results}}'
    when: item.rc is defined and item.rc == 1

  - name: Display Switch Error
    assert: {that: ErrMsg is not defined, fail_msg: '{{ErrMsg.split(newline_var)}}'}
    when: ErrMsg is defined

  - name: Get Interface Config
    icx_command: {commands: 'show run interface {{ConfigList[idx].ansible_facts.iface}}'}
    loop: '{{range(0, CfgLstCnt|int)|list}}'
    loop_control: {index_var: idx}
    register: IntConfigStatus
    when: ConfigList[idx].ansible_facts is defined

  - name: Display Interface Config
    debug: var=IntConfigStatus.results[idx].stdout_lines[0]
    loop: '{{range(0, CfgLstCnt|int)|list}}'
    loop_control: {index_var: idx}
    when: IntConfigStatus.results[idx].stdout[0] is defined
